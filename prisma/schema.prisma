// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Detailer {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  businessName String
  email        String?
  firstName    String?
  lastName     String?
  phone        String
  address      String
  city         String
  state        String
  zipCode      String
  description  String
  latitude     Float
  longitude    Float
  priceRange   String
  website      String?
  imageUrl     String?
  password     String?
  googlePlaceId String?
  instagram    String?
  tiktok       String?
  facebook     String?
  businessHours Json
  images       Image[]
  detailerImages DetailerImage[]
  createdAt    DateTime? @default(now())
  services     DetailerService[]
  bundles      Bundle[]
  reviews      Review[]
  notifications Notification[]
  verified     Boolean @default(false)
  hidden       Boolean @default(false)
  
  // SMS Integration
  twilioPhoneNumber String?  // Twilio phone number for SMS communication
  smsEnabled        Boolean  @default(false)
  
  // Google Calendar Integration
  googleCalendarConnected   Boolean @default(false)
  googleCalendarTokens      String? // JSON string of OAuth tokens
  googleCalendarRefreshToken String?
  syncAppointments         Boolean @default(false)
  syncAvailability         Boolean @default(false)
  
  // Instagram Integration
  instagramConnected       Boolean @default(false)
  instagramTokens          String? // JSON string of OAuth tokens
  instagramRefreshToken    String?
  instagramBusinessAccountId String? // Instagram Business Account ID
  instagramPageId          String? // Connected Facebook Page ID
  instagramDmEnabled       Boolean @default(false) // Enable AI to respond to DMs
  
  // Relations
  conversations     Conversation[]
  bookings          Booking[]
}

model Image {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  url        String
  alt        String
  detailer   Detailer @relation(fields: [detailerId], references: [id])
  detailerId String   @db.ObjectId
  type       String   // 'profile' or 'portfolio'
}

model DetailerImage {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  url        String
  key        String // S3 key for the image
  alt        String
  detailer   Detailer  @relation(fields: [detailerId], references: [id])
  detailerId String    @db.ObjectId
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  icon        String?
  services    Service[] // Relation to services
}

model Service {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     @unique
  description String?
  icon        String?
  categoryId  String?    @db.ObjectId
  category    Category?  @relation(fields: [categoryId], references: [id])
  detailers   DetailerService[]
  bundles     BundleService[]
}

model DetailerService {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  detailer   Detailer @relation(fields: [detailerId], references: [id])
  detailerId String   @db.ObjectId
  service    Service  @relation(fields: [serviceId], references: [id])
  serviceId  String   @db.ObjectId
}

model Bundle {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  description String?
  price      Float
  imageUrl   String?
  detailer   Detailer @relation(fields: [detailerId], references: [id])
  detailerId String   @db.ObjectId
  services   BundleService[]
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

model BundleService {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  bundle   Bundle  @relation(fields: [bundleId], references: [id])
  bundleId String  @db.ObjectId
  service  Service @relation(fields: [serviceId], references: [id])
  serviceId String @db.ObjectId
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  detailer   Detailer @relation(fields: [detailerId], references: [id])
  detailerId String   @db.ObjectId
  authorName String
  rating     Int
  comment    String
  reply      String?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

model Notification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  detailer   Detailer @relation(fields: [detailerId], references: [id])
  detailerId String   @db.ObjectId
  message    String
  type       String
  link       String?
  read       Boolean  @default(false)
  createdAt  DateTime? @default(now())
}

model Conversation {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  detailer     Detailer  @relation(fields: [detailerId], references: [id])
  detailerId   String    @db.ObjectId
  customerPhone String   // Customer's phone number
  customerName  String?  // Customer's name (if provided)
  status       String    @default("active") // active, completed, cancelled
  lastMessageAt DateTime? @default(now())
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt
  
  // Relations
  messages     Message[]
  bookings     Booking[]
  
  // Index for quick lookups
  @@unique([detailerId, customerPhone])
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @db.ObjectId
  direction      String       // "inbound" or "outbound"
  content        String       // Message content
  twilioSid      String?      // Twilio message SID for tracking
  status         String       @default("sent") // sent, delivered, failed
  createdAt      DateTime?    @default(now())
}

model Booking {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  detailer       Detailer     @relation(fields: [detailerId], references: [id])
  detailerId     String       @db.ObjectId
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?      @db.ObjectId
  customerPhone  String       // Customer's phone number
  customerName   String?      // Customer's name
  customerEmail  String?      // Customer's email
  vehicleType    String?      // Car type, model, year, etc.
  vehicleLocation String?     // Where the vehicle is located
  services       String[]     // Array of service names
  totalPrice     Float?       // Total price for the booking
  scheduledDate  DateTime     // When the service is scheduled
  scheduledTime  String?      // Specific time slot
  duration       Int?         // Duration in minutes
  status         String       @default("pending") // pending, confirmed, completed, cancelled
  notes          String?      // Additional notes from customer or detailer
  googleEventId  String?      // Google Calendar event ID if synced
  createdAt      DateTime?    @default(now())
  updatedAt      DateTime?    @updatedAt
  
  // Relations
  @@unique([detailerId, scheduledDate, customerPhone])
}
