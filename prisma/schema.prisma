// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Detailer {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  businessName String
  email        String?
  firstName    String?
  lastName     String?
  phone        String
  address      String
  city         String
  state        String
  zipCode      String
  description  String
  latitude     Float
  longitude    Float
  priceRange   String
  website      String?
  imageUrl     String?
  password     String?
  googlePlaceId String?
  instagram    String?
  tiktok       String?
  facebook     String?
  businessHours Json
  images       Image[]
  detailerImages DetailerImage[]
  createdAt    DateTime? @default(now())
  services     DetailerService[]
  bundles      Bundle[]
  reviews      Review[]
  notifications Notification[]
  verified     Boolean @default(false)
  hidden       Boolean @default(false)
  
  // SMS Integration
  twilioPhoneNumber String?  // Twilio phone number for customer-facing AI concierge
  personalAssistantPhoneNumber String? // Twilio phone number for Personal Assistant AI
  smsEnabled        Boolean  @default(false)
  personalPhoneNumber String? // Detailer's personal phone number for AI assistant
  timezone          String   @default("America/New_York") // IANA timezone for accurate slot generation
  
  // Google Calendar Integration
  googleCalendarConnected   Boolean @default(false)
  googleCalendarTokens      String? // JSON string of OAuth tokens
  googleCalendarRefreshToken String?
  syncAppointments         Boolean @default(false)
  syncAvailability         Boolean @default(false)
  
  // Instagram Integration
  instagramConnected       Boolean @default(false)
  instagramTokens          String? // JSON string of OAuth tokens
  instagramRefreshToken    String?
  instagramBusinessAccountId String? // Instagram Business Account ID
  instagramPageId          String? // Connected Facebook Page ID
  instagramDmEnabled       Boolean @default(false) // Enable AI to respond to DMs
  
  // Password Reset
  resetToken        String?
  resetTokenExpiry  DateTime?
  
  // Subscription & Billing
  subscription      Subscription?
  stripeCustomerId  String?        // Stripe customer ID
  trialEndsAt       DateTime?      // 14-day trial end date
  isFirstCohort     Boolean        @default(false) // For discounted rate
  
  // Relations
  conversations     Conversation[]
  bookings          Booking[]
  customers         Customer[]
  customerSnapshots CustomerSnapshot[]
  events            Event[]
  charges           Charge[]
}

model Image {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  url        String
  alt        String
  detailer   Detailer @relation(fields: [detailerId], references: [id])
  detailerId String   @db.ObjectId
  type       String   // 'profile' or 'portfolio'
}

model DetailerImage {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  url        String
  key        String // S3 key for the image
  alt        String
  detailer   Detailer  @relation(fields: [detailerId], references: [id])
  detailerId String    @db.ObjectId
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  icon        String?
  services    Service[] // Relation to services
}

model Service {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     @unique
  description String?
  icon        String?
  categoryId  String?    @db.ObjectId
  category    Category?  @relation(fields: [categoryId], references: [id])
  
  // Pricing fields
  basePrice    Float?     // Base price for the service
  priceRange   String?    // Price range (e.g., "$50-75", "Starting at $40")
  duration     Int?       // Estimated duration in minutes
  
  detailers   DetailerService[]
  bundles     BundleService[]
}

model DetailerService {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  detailer   Detailer @relation(fields: [detailerId], references: [id])
  detailerId String   @db.ObjectId
  service    Service  @relation(fields: [serviceId], references: [id])
  serviceId  String   @db.ObjectId
}

model Bundle {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  description String?
  price      Float
  imageUrl   String?
  detailer   Detailer @relation(fields: [detailerId], references: [id])
  detailerId String   @db.ObjectId
  services   BundleService[]
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

model BundleService {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  bundle   Bundle  @relation(fields: [bundleId], references: [id])
  bundleId String  @db.ObjectId
  service  Service @relation(fields: [serviceId], references: [id])
  serviceId String @db.ObjectId
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  detailer   Detailer @relation(fields: [detailerId], references: [id])
  detailerId String   @db.ObjectId
  authorName String
  rating     Int
  comment    String
  reply      String?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

model Notification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  detailer   Detailer @relation(fields: [detailerId], references: [id])
  detailerId String   @db.ObjectId
  message    String
  type       String
  link       String?
  read       Boolean  @default(false)
  createdAt  DateTime? @default(now())
}

model Conversation {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  detailer     Detailer  @relation(fields: [detailerId], references: [id])
  detailerId   String    @db.ObjectId
  customerPhone String   // Customer's phone number
  customerName  String?  // Customer's name (if provided)
  status       String    @default("active") // active, completed, cancelled
  metadata     Json?     // Conversation state machine data
  lastMessageAt DateTime? @default(now())
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt
  
  // Relations
  messages     Message[]
  bookings     Booking[]
  customer     Customer? @relation(fields: [customerId], references: [id])
  customerId   String?   @db.ObjectId
  
  // Index for quick lookups
  @@unique([detailerId, customerPhone])
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @db.ObjectId
  direction      String       // "inbound" or "outbound"
  content        String       // Message content
  twilioSid      String?      @unique // Twilio message SID for tracking (unique to prevent duplicates)
  status         String       @default("sent") // sent, delivered, failed
  createdAt      DateTime?    @default(now())
}

/// Stores persistent, per-customer information inferred across conversations
model CustomerSnapshot {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  detailer       Detailer  @relation(fields: [detailerId], references: [id])
  detailerId     String    @db.ObjectId
  customerPhone  String
  customerName   String?
  customerEmail  String?
  // Latest known address for service location
  address        String?
  // Type of location (home, work, other)
  locationType   String?
  // Simple vehicle description string (e.g., "Toyota RAV4 2023")
  vehicle        String?
  // Structured vehicle fields for better filtering
  vehicleYear    Int?
  vehicleMake    String?
  vehicleModel   String?
  // Services requested by customer
  services       String[]
  // Additional structured data as JSON for flexibility
  data           Json?
  vcardSent      Boolean? @default(false)
  customer       Customer? @relation(fields: [customerId], references: [id])
  customerId     String?   @db.ObjectId
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @updatedAt

  @@unique([detailerId, customerPhone])
}

/// Persistent customer records with contact information and preferences
model Customer {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  detailer          Detailer  @relation(fields: [detailerId], references: [id])
  detailerId        String    @db.ObjectId
  name              String    // Customer's full name
  phone             String    // Primary phone number
  email             String?   // Email address (optional)
  address           String?   // Primary address
  locationType      String?   // "home", "office", or "other"
  vehicleInfo       Json?     // Array of vehicle objects with year, make, model, luxury flag, notes
  lastDetailId      String?   @db.ObjectId // Reference to last appointment
  preferredTime     String?   // "morning", "afternoon", or "evening"
  flexibility       String?   // "urgent", "this_week", or "whenever"
  avgResponseTime   String?   // Mean reply speed (e.g., "00:04:00")
  avgGapBetweenMessages String? // Avg time between texts
  tags              String[]  // Tags like "VIP", "no show risk"
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  bookings          Booking[]
  conversations     Conversation[]
  customerSnapshots CustomerSnapshot[]

  @@unique([detailerId, phone])
}

model Booking {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  detailer       Detailer     @relation(fields: [detailerId], references: [id])
  detailerId     String       @db.ObjectId
  customer       Customer?    @relation(fields: [customerId], references: [id])
  customerId     String?      @db.ObjectId
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?      @db.ObjectId
  customerPhone  String       // Customer's phone number
  customerName   String?      // Customer's name
  customerEmail  String?      // Customer's email
  vehicleType    String?      // Car type, model, year, etc.
  vehicleLocation String?     // Where the vehicle is located
  services       String[]     // Array of service names
  totalPrice     Float?       // Total price for the booking
  scheduledDate  DateTime     // When the service is scheduled
  scheduledTime  String?      // Specific time slot
  duration       Int?         // Duration in minutes
  status         String       @default("pending") // pending, confirmed, completed, cancelled
  notes          String?      // Additional notes from customer or detailer
  googleEventId  String?      // Google Calendar event ID if synced
  createdAt      DateTime?    @default(now())
  updatedAt      DateTime?    @updatedAt
  
  // Relations
  events            Event[]
  @@unique([detailerId, scheduledDate, customerPhone])
}

model Event {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  detailer       Detailer  @relation(fields: [detailerId], references: [id])
  detailerId     String    @db.ObjectId
  title          String
  date           DateTime
  time           String?
  allDay         Boolean   @default(false)
  color          String    @default("blue")
  description    String?
  location       String?
  googleEventId  String?
  bookingId      String?   @db.ObjectId
  booking        Booking?  @relation(fields: [bookingId], references: [id])
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @updatedAt

  @@map("events")
}

// Subscription Plans
model SubscriptionPlan {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique // "Detailer Starter" or "Detailer Pro"
  type        String   // "pay_per_booking" or "monthly"
  price       Float    // $3 for starter, $200 for pro
  stripePriceId String? // Stripe price ID
  description String
  features    String[] // Array of feature descriptions
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  subscriptions Subscription[]
}

// Detailer Subscriptions
model Subscription {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  detailer          Detailer         @relation(fields: [detailerId], references: [id])
  detailerId        String           @db.ObjectId
  plan              SubscriptionPlan @relation(fields: [planId], references: [id])
  planId            String           @db.ObjectId
  status            String           @default("trial") // trial, active, past_due, canceled, incomplete
  stripeSubscriptionId String?       // Stripe subscription ID
  stripeCustomerId  String?         // Stripe customer ID
  currentPeriodStart DateTime?       // Current billing period start
  currentPeriodEnd   DateTime?       // Current billing period end
  trialStart        DateTime?        // Trial start date
  trialEnd          DateTime?        // Trial end date
  canceledAt        DateTime?        // When subscription was canceled
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  // Relations
  invoices          Invoice[]
  
  @@unique([detailerId])
}

// Invoices
model Invoice {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  subscription      Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId    String       @db.ObjectId
  stripeInvoiceId   String?      // Stripe invoice ID
  amount            Float        // Invoice amount
  currency          String       @default("usd")
  status            String       @default("draft") // draft, open, paid, void, uncollectible
  periodStart       DateTime     // Billing period start
  periodEnd         DateTime     // Billing period end
  dueDate           DateTime?    // Invoice due date
  paidAt            DateTime?    // When invoice was paid
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

// Pay-per-booking charges
model Charge {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  detailer    Detailer @relation(fields: [detailerId], references: [id])
  detailerId  String   @db.ObjectId
  bookingId   String?  // Reference to the booking that triggered this charge
  amount      Int      // Amount in cents ($3.00 = 300 cents)
  currency    String   @default("usd")
  status      String   @default("pending") // pending, completed, failed, refunded
  description String   // "Pay-per-booking fee"
  chargedAt   DateTime? // When the charge was processed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
